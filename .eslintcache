[{"/Users/devanshjatinponda/Desktop/cs-sg-app/src/index.js":"1","/Users/devanshjatinponda/Desktop/cs-sg-app/src/App.js":"2","/Users/devanshjatinponda/Desktop/cs-sg-app/src/reportWebVitals.js":"3","/Users/devanshjatinponda/Desktop/cs-sg-app/src/components/SortingActivity.js":"4","/Users/devanshjatinponda/Desktop/cs-sg-app/src/components/LoopsActivity.js":"5","/Users/devanshjatinponda/Desktop/cs-sg-app/src/components/VariableActivity.js":"6","/Users/devanshjatinponda/Desktop/cs-sg-app/src/components/ConditionalActivity.js":"7"},{"size":500,"mtime":1606781135540,"results":"8","hashOfConfig":"9"},{"size":1099,"mtime":1607379991384,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1606781135543,"results":"11","hashOfConfig":"9"},{"size":9949,"mtime":1607380126875,"results":"12","hashOfConfig":"9"},{"size":5420,"mtime":1607379991412,"results":"13","hashOfConfig":"9"},{"size":4296,"mtime":1607379991415,"results":"14","hashOfConfig":"9"},{"size":4841,"mtime":1607379991410,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1rmrzv5",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},"/Users/devanshjatinponda/Desktop/cs-sg-app/src/index.js",[],["32","33"],"/Users/devanshjatinponda/Desktop/cs-sg-app/src/App.js",["34"],"/Users/devanshjatinponda/Desktop/cs-sg-app/src/reportWebVitals.js",[],"/Users/devanshjatinponda/Desktop/cs-sg-app/src/components/SortingActivity.js",["35"],"/Users/devanshjatinponda/Desktop/cs-sg-app/src/components/LoopsActivity.js",[],"/Users/devanshjatinponda/Desktop/cs-sg-app/src/components/VariableActivity.js",[],"/Users/devanshjatinponda/Desktop/cs-sg-app/src/components/ConditionalActivity.js",["36"],"import React, { Component } from 'react';\nimport { Form, Button, Container, Card} from 'react-bootstrap'\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { browserHistory } from 'react-router';\n\nclass ConditionalActivity extends Component {\n    constructor(props) {\n        super(props);\n        \n    }\n\n    state = {\n        numberOne: null,\n        numberTwo: null,\n        numberThree: null,\n        greatest: \"\",\n        least: \"\"\n    };\n\n    handleProceed = () => {\n        browserHistory.push('/loops');\n    }\n\n    handleBack = () => {\n        browserHistory.push('/');\n    }\n    \n    compareNumbers = () => {\n        if (!this.state.numberOne || !this.state.numberTwo || !this.state.numberThree) {\n            // invalid input\n            return\n        }\n\n        let number1 = parseInt(this.state.numberOne)\n        let number2 = parseInt(this.state.numberTwo)\n        let number3 = parseInt(this.state.numberThree)\n\n        if (isNaN(number1) || isNaN(number2) || isNaN(number3)) {\n            // invalid input\n            return\n        }\n\n        let greatest = \"\"\n        let least = \"\"\n\n        // logic for comparing\n        if (number1 >= number2 && number1 >= number3) {\n            greatest = number1\n        } else if (number2 >= number1 && number2 >= number3) {\n            greatest = number2\n        } else if (number3 >= number1 && number3 >= number1) {\n            greatest = number3\n        }\n\n        if (number1 <= number2 && number1 <= number3) {\n            least = number1\n        } else if (number2 <= number1 && number2 <= number3) {\n            least = number2\n        } else if (number3 <= number1 && number3 <= number2) {\n            least = number3\n        }\n\n        this.setState({\n            greatest: greatest,\n            least: least\n        })\n    };\n\n\n    render() {\n        return (\n        <Container >\n            <br/>\n            <h2 style={{textAlign: \"center\"}}>Conditionals Activity</h2>\n            <hr/>\n            <Row style={{width:\"100%\"}}className=\"justify-content-md-center\">\n                <Col >\n                    <Row className=\"justify-content-md-center\">\n                        <Form.Label><h4>Enter three numbers:</h4></Form.Label>\n                    </Row>\n                    <Row className=\"justify-content-md-center\">\n                    <Form.Group >\n                        <Form.Control\n                        className=\"variableExample\"\n                        placeholder=\"Number One\"\n                        style={{marginTop: \"10px\"}}\n                        value={this.state.numberOne}\n                        onChange={e => this.setState({ numberOne: e.target.value })}\n                        type=\"text\"\n                        />\n                        <Form.Control\n                        className=\"variableExample\"\n                        placeholder=\"Number Two\"\n                        style={{marginTop: \"10px\"}}\n                        value={this.state.numberTwo}\n                        onChange={e => this.setState({ numberTwo: e.target.value })}\n                        type=\"text\"\n                        />\n                        <Form.Control\n                        className=\"variableExample\"\n                        placeholder=\"Number Three\"\n                        style={{marginTop: \"10px\"}}\n                        value={this.state.numberThree}\n                        onChange={e => this.setState({ numberThree: e.target.value})}\n                        type=\"text\"\n                        />\n                        <Row className=\"justify-content-md-center\">\n                        <Button\n                        className=\"btnFormSend\"\n                        style={{marginTop: \"30px\"}}\n                        onClick={this.compareNumbers}\n                        >\n                        Compare\n                        </Button>\n                        </Row>\n                    </Form.Group> \n                    </Row> \n                </Col>\n            </Row>\n            <hr/>\n            <Row style={{width:\"100%\", color: \"white\"}}className=\"justify-content-md-center\">\n                <h4>Greatest = <span style={{color: \"#7FFF00\"}}>{this.state.greatest}</span></h4>    \n            </Row>\n            <Row style={{width:\"100%\", color: \"white\"}}className=\"justify-content-md-center\"> \n                <h4>Least = <span style={{color: \"#7FFF00\"}}>{this.state.least}</span></h4>\n            </Row>\n\n            <Button onClick={this.handleBack} className={'my-navigation-button'} >\n                Go To Previous Activity!\n            </Button>\n            <Button onClick={this.handleProceed} className={'my-navigation-button'} >\n                Proceed To Next Activity!\n            </Button>\n        </Container>\n\n        );\n      }\n}\n\nexport default ConditionalActivity;",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":1,"column":8,"nodeType":"43","messageId":"44","endLine":1,"endColumn":12},{"ruleId":"41","severity":1,"message":"45","line":102,"column":15,"nodeType":"43","messageId":"44","endLine":102,"endColumn":22},{"ruleId":"46","severity":1,"message":"47","line":8,"column":5,"nodeType":"48","messageId":"49","endLine":11,"endColumn":6},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'isValid' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]